generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model event {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @db.VarChar(255)
  date                   DateTime                 @db.Date
  location               String                   @db.VarChar(255)
  description            String                   @db.VarChar(255)
  organizer_id           String                   @db.Uuid
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  user                   user                     @relation(fields: [organizer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  performance_assessment performance_assessment[]
  reservation            reservation[]
  usage_tracking         usage_tracking[]
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_assessment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizer_id    String   @db.Uuid
  event_id        String   @db.Uuid
  assessment_date DateTime @db.Date
  rating          Int
  comment         String   @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  event           event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user     @relation(fields: [organizer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reservation {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id         String   @db.Uuid
  user_id          String   @db.Uuid
  reservation_date DateTime @db.Date
  status           String   @db.VarChar(255)
  number_of_guests Int
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  event            event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model usage_tracking {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id       String   @db.Uuid
  user_id        String   @db.Uuid
  usage_date     DateTime @db.Date
  usage_time     DateTime @db.Time(6)
  usage_duration Int
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  event          event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String                   @unique @db.VarChar(255)
  firstName              String?                  @db.VarChar(255)
  lastName               String?                  @db.VarChar(255)
  roq_user_id            String                   @db.VarChar(255)
  tenant_id              String                   @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  event                  event[]
  organization           organization[]
  performance_assessment performance_assessment[]
  reservation            reservation[]
  usage_tracking         usage_tracking[]
}
